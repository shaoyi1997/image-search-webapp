import { SearchIcon } from "@chakra-ui/icons";
import {
  Box,
  Center,
  Image as ChakraImage,
  Heading,
  HStack,
  Input,
  InputGroup,
  InputLeftElement,
  SimpleGrid,
  Skeleton,
  Text,
  Button,
  ButtonGroup,
  Popover,
  PopoverArrow,
  PopoverBody,
  PopoverCloseButton,
  PopoverContent,
  PopoverFooter,
  PopoverHeader,
  PopoverTrigger,
  useDisclosure,
} from "@chakra-ui/react";
import { motion } from "framer-motion";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useCallback, useState } from "react";

const SAMPLE_IMAGE =
  "https://images.unsplash.com/photo-1649888658347-b6a2d298a6e1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80";

const ImageWrapper: React.FC<{ result: Result; rank: number }> = ({
  result,
  rank,
}) => {
  const { isOpen, onOpen, onClose } = useDisclosure();

  return (
    <Box
      as={motion.div}
      layout
      whileHover={{
        boxShadow: "10px 10px 0px #000000",
        cursor: "pointer",
      }}
      p="16px"
      borderRadius="8px"
      border="2px solid black"
      pos="relative"
      onHoverStart={onOpen}
      onHoverEnd={onClose}
    >
      <Image
        src={result.url}
        width="360px"
        height="360px"
        objectFit="cover"
        alt=""
      />
      <Popover
        placement="right"
        closeOnBlur={true}
        closeDelay={0}
        isOpen={isOpen}
        onClose={onClose}
      >
        <PopoverTrigger>
          <Button
            pos="absolute"
            top={0}
            left={0}
            bgColor="#F7EDE8"
            transform="translate(-20%, -50%)"
            _focus={{
              outline: "none",
              border: "none",
            }}
          >
            {rank}
          </Button>
        </PopoverTrigger>
        <PopoverContent
          color="white"
          bg="blue.800"
          borderColor="none"
          _focus={{
            outline: "none",
            border: "none",
          }}
        >
          <PopoverHeader fontWeight="bold" border="0">
            Similarity = {(result.score * 100).toFixed(2)}%
          </PopoverHeader>
          <PopoverArrow />
          <PopoverCloseButton />
        </PopoverContent>
      </Popover>
    </Box>
  );
};

interface Result {
  url: string;
  score: number;
}

const Home: NextPage = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [isSearching, setIsSearching] = useState(false);
  const [results, setResults] = useState<Result[]>([]);
  const [hasSearched, setHasSearched] = useState(false);

  console.log(results);

  const fetchImages = useCallback(
    async (searchTerm: string) => {
      setIsSearching(true);
      setSearchTerm("");

      if (!hasSearched) {
        setHasSearched(true);
      }

      const body = new FormData();

      body.append("queries", [searchTerm].toString());

      const result = await fetch("http://localhost:6001/send_queries", {
        method: "POST",
        body,
      });

      const data = (await result.json()) as {
        data: Array<{ url: string; score: string }>;
      };

      setResults(
        data.data.map((r) => {
          return {
            ...r,
            score: Number.parseFloat(r.score),
          };
        })
      );

      setIsSearching(false);
    },
    [hasSearched]
  );

  return (
    <>
      <Head>
        <title>Image Search</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main
        style={{
          paddingBottom: "100px",
        }}
      >
        <Center
          bgColor="#F7EDE8"
          h={!hasSearched ? "50vh" : "400px"}
          flexDir="column"
          pos="relative"
          textAlign="center"
          zIndex={1}
          transition="all 300ms ease-in"
        >
          <Heading
            fontWeight="700"
            fontSize="4rem"
            display="inline-block"
            zIndex={1}
          >
            Image{" "}
            <span
              style={{
                color: "#CD4631",
              }}
            >
              Search
            </span>
            <Box
              pos="absolute"
              bottom={0}
              left={0}
              zIndex={0}
              w="200px"
              h="300px"
            >
              <ChakraImage
                src="/headerImg.png"
                objectFit="cover"
                objectPosition="left bottom"
                alt=""
              />
            </Box>
            <Box
              pos="absolute"
              bottom={20}
              right={0}
              zIndex={0}
              w="200px"
              h="100px"
            >
              <ChakraImage
                src="/headerImg2.png"
                objectFit="cover"
                objectPosition="right bottom"
                alt=""
              />
            </Box>
          </Heading>
          <Text mt="10">Find your image by describing it!</Text>
        </Center>

        <Center mt="-25px">
          <InputGroup
            w={{ base: "320px", lg: "480px" }}
            h="50px"
            border="none"
            outline="none"
            _hover={{
              border: "none",
              outline: "none",
            }}
            as={motion.div}
            whileHover={{ scale: 1.05 }}
            zIndex={1}
          >
            <InputLeftElement pointerEvents="none" h="50px">
              <SearchIcon color="gray.300" />
            </InputLeftElement>
            <Input
              type="text"
              placeholder="Search by image caption"
              h="50px"
              bgColor="white"
              padding="24px 0px 24px 50px"
              border="1.5px solid black"
              outline="none"
              boxShadow="6px 6px 0px #81ADC8"
              borderRadius="16px"
              transition="box-shadow 150ms ease-in"
              _hover={{
                border: "1.5px solid black",
              }}
              _focus={{
                boxShadow: "6px 6px 0px #81ADC8",
              }}
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              onKeyDown={(e) => {
                if (e.code === "Enter") {
                  fetchImages(searchTerm);
                }
              }}
            />
          </InputGroup>
        </Center>

        {hasSearched && (
          <Center mt="80px" flexDir="column">
            <Box pos="relative" w="min-content">
              <Heading
                fontWeight="700"
                fontSize="3rem"
                display="inline-block"
                pos="relative"
              >
                Results
              </Heading>
              <Box
                as="span"
                pos="absolute"
                top={-12}
                left={-14}
                w="100px"
                h="100px"
              >
                <Image
                  src="/sparkle.png"
                  layout="fill"
                  objectFit="contain"
                  objectPosition="left top"
                  alt=""
                />
              </Box>
            </Box>

            {isSearching ? (
              <HStack spacing="100px" mt="80px">
                <Skeleton w="360px" h="360px" />
                <Skeleton w="360px" h="360px" />
              </HStack>
            ) : results.length === 0 ? (
              <Text mt="80px">No images found yet</Text>
            ) : (
              <SimpleGrid
                columns={{ base: 1, lg: 2 }}
                columnGap="100px"
                rowGap="50px"
                mt="60px"
              >
                {results.map((r, i) => (
                  <ImageWrapper key={r.url} result={r} rank={i + 1} />
                ))}
              </SimpleGrid>
            )}
          </Center>
        )}
      </main>
    </>
  );
};

export default Home;
